{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction TemplateComponent_div_42_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.TypeName);\n  }\n}\n\nfunction TemplateComponent_div_42_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.Subject);\n  }\n}\n\nfunction TemplateComponent_div_42_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"pre\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.Description);\n  }\n}\n\nfunction TemplateComponent_div_42_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"pre\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r4.Extras);\n  }\n}\n\nfunction TemplateComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, TemplateComponent_div_42_span_1_Template, 2, 1, \"span\", 25);\n    i0.ɵɵtext(2, \"\\u00A0\");\n    i0.ɵɵtemplate(3, TemplateComponent_div_42_span_3_Template, 2, 1, \"span\", 25);\n    i0.ɵɵtemplate(4, TemplateComponent_div_42_div_4_Template, 4, 1, \"div\", 25);\n    i0.ɵɵtemplate(5, TemplateComponent_div_42_div_5_Template, 4, 1, \"div\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"col-sm alert \", ctx_r0.isValid ? \"alert-success\" : \"alert-danger\", \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.TypeName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Subject);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Extras);\n  }\n}\n\nexport let TemplateComponent = /*#__PURE__*/(() => {\n  class TemplateComponent {\n    constructor() {\n      this.Type = \"\";\n      this.Subject = \"\";\n      this.Description = \"\";\n      this.Extras = \"\";\n      this.TypeIcon = \"\";\n      this.TypeName = \"\";\n      this.isValid = false;\n    }\n\n    ngOnInit() {\n      const type = document.getElementById('type');\n      const subject = document.getElementById('subject');\n      const description = document.getElementById('description');\n      const extras = document.getElementById('extras');\n      type?.addEventListener('input', event => {\n        this.Type = event.target?.value;\n        this.setIcon();\n        this.validate();\n      });\n      subject?.addEventListener('input', event => {\n        this.Subject = event.target?.value;\n        this.validate();\n      });\n      description?.addEventListener('input', event => {\n        this.Description = event.target?.value;\n        this.validate();\n      });\n      extras?.addEventListener('input', event => {\n        this.Extras = event.target?.value;\n        this.validate();\n      });\n    }\n\n    setIcon() {\n      if (!this.Type) {\n        return;\n      }\n\n      switch (this.Type) {\n        case 'feat':\n          this.TypeIcon = \"assets/emoji/sparkles.png\";\n          this.TypeName = \":sparkles:\";\n          break;\n\n        case 'fix':\n          this.TypeIcon = \"assets/emoji/bug.png\";\n          this.TypeName = \":bug:\";\n          break;\n\n        case 'refactor':\n          this.TypeIcon = \"assets/emoji/hammer.png\";\n          this.TypeName = \":hammer:\";\n          break;\n\n        case 'perf':\n          this.TypeIcon = \"assets/emoji/racehorse.png\";\n          this.TypeName = \":racehorse:\";\n          break;\n\n        case 'sec':\n          this.TypeIcon = \"assets/emoji/lock.png\";\n          this.TypeName = \":lock:\";\n          break;\n\n        case 'style':\n          this.TypeIcon = \"assets/emoji/art.png\";\n          this.TypeName = \":art:\";\n          break;\n\n        case 'docs':\n          this.TypeIcon = \"assets/emoji/books.png\";\n          this.TypeName = \":books:\";\n          break;\n\n        case 'test':\n          this.TypeIcon = \"assets/emoji/white_check_mark.png\";\n          this.TypeName = \":white_check_mark:\";\n          break;\n\n        case 'chore':\n          this.TypeIcon = \"assets/emoji/wrench.png\";\n          this.TypeName = \":wrench:\";\n          break;\n\n        case 'i18n':\n          this.TypeIcon = \"assets/emoji/speech_balloon.png\";\n          this.TypeName = \":speech_balloon:\";\n          break;\n\n        case 'init':\n          this.TypeIcon = \"assets/emoji/tada.png\";\n          this.TypeName = \":tada:\";\n          break;\n\n        default:\n          this.TypeIcon = \"\";\n          this.TypeName = \"\";\n      }\n    }\n\n    validate() {\n      if (this.Subject) {\n        this.Subject = this.Subject[0].toUpperCase() + this.Subject.slice(1);\n\n        if (this.Subject.charAt(this.Subject.length - 1) == '.') {\n          this.Subject = this.Subject.slice(0, this.Subject.length - 1);\n        }\n      }\n\n      if (this.Description) {\n        this.Description = this.Description.replace(/.{72}/g, '$&\\n');\n      }\n\n      if (this.Extras) {\n        this.Extras = this.Extras.replace(/.{72}/g, '$&\\n');\n      }\n\n      if (this.Type && this.Subject) {\n        this.isValid = true;\n      } else {\n        this.isValid = false;\n      }\n    }\n\n  }\n\n  TemplateComponent.ɵfac = function TemplateComponent_Factory(t) {\n    return new (t || TemplateComponent)();\n  };\n\n  TemplateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TemplateComponent,\n    selectors: [[\"app-template\"]],\n    decls: 46,\n    vars: 2,\n    consts: [[1, \"container\"], [1, \"py-4\", \"text-center\"], [\"src\", \"assets/logo.png\", \"alt\", \"Unified Post\", 1, \"mb-4\", 2, \"height\", \"3em\"], [1, \"lead\"], [1, \"row\"], [1, \"col-sm\"], [\"id\", \"type\", 1, \"w-100\", \"form-select\", \"form-select-lg\", \"form-control-lg\", \"mb-3\"], [\"value\", \"\"], [\"value\", \"feat\"], [\"value\", \"fix\"], [\"value\", \"refactor\"], [\"value\", \"perf\"], [\"value\", \"sec\"], [\"value\", \"style\"], [\"value\", \"docs\"], [\"value\", \"test\"], [\"value\", \"chore\"], [\"value\", \"i18n\"], [\"value\", \"init\"], [1, \"py-4\"], [\"type\", \"text\", \"id\", \"subject\", \"placeholder\", \"Subject\", \"maxlength\", \"50\", 1, \"w-100\", \"form-control\", \"form-control-lg\"], [\"rows\", \"5\", \"id\", \"description\", \"placeholder\", \"Description\", 1, \"w-100\", \"form-control\", \"form-control-lg\"], [\"rows\", \"5\", \"id\", \"extras\", \"placeholder\", \"Extra's\", 1, \"w-100\", \"form-control\", \"form-control-lg\"], [3, \"class\", 4, \"ngIf\"], [1, \"alert\", \"alert-primary\", 3, \"ngClass\"], [4, \"ngIf\"]],\n    template: function TemplateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n        i0.ɵɵelement(3, \"img\", 2);\n        i0.ɵɵtext(4, \" Commit Message Generator \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"p\");\n        i0.ɵɵtext(7, \"Fill in the values below and generate the commit messages\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"div\", 5)(10, \"div\")(11, \"select\", 6)(12, \"option\", 7);\n        i0.ɵɵtext(13, \"Type...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 8);\n        i0.ɵɵtext(15, \"new feature\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"option\", 9);\n        i0.ɵɵtext(17, \"bug fix\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"option\", 10);\n        i0.ɵɵtext(19, \"refactoring code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"option\", 11);\n        i0.ɵɵtext(21, \"performance improvements\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"option\", 12);\n        i0.ɵɵtext(23, \"security improvements\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"option\", 13);\n        i0.ɵɵtext(25, \"formatting, code style\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"option\", 14);\n        i0.ɵɵtext(27, \"changes to documentation\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"option\", 15);\n        i0.ɵɵtext(29, \"adding or refactoring tests\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"option\", 16);\n        i0.ɵɵtext(31, \"updating tasks, configuration\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"option\", 17);\n        i0.ɵɵtext(33, \"translation\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"option\", 18);\n        i0.ɵɵtext(35, \"begin a project\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(36, \"div\", 19);\n        i0.ɵɵelement(37, \"input\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 19);\n        i0.ɵɵelement(39, \"textarea\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"div\", 19);\n        i0.ɵɵelement(41, \"textarea\", 22);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(42, TemplateComponent_div_42_Template, 6, 7, \"div\", 23);\n        i0.ɵɵelementStart(43, \"div\", 24)(44, \"pre\");\n        i0.ɵɵtext(45, \"<type>: (If applied, this commit will...) <subject> (Max 50 char)\\n|<----  Using a Maximum Of 50 Characters  ---->|\\n\\n\\nExplain why this change is being made\\n|<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|\\n\\nProvide links to any relevant tickets, articles or other resources\\n\\n----------------------------- COMMIT END -----------------------------\\nType can be\\n    :sparkles:         feat     (new feature)\\n    :bug:              fix      (bug fix)\\n    :hammer:           refactor (refactoring code)\\n    :racehorse:        perf     (performance improvements)\\n    :lock:             sec      (security improvements)\\n    :art:              style    (formatting, code style)\\n    :books:            docs     (changes to documentation)\\n    :white_check_mark: test     (adding or refactoring tests)\\n    :wrench:           chore    (updating tasks, configuration)\\n    :speech_balloon:   i18n     (translation)\\n    :tada:             init     (begin a project)\\n----------------------------------------------------------------------\\nRemember to\\n    Capitalize the subject line\\n    Use the imperative mood in the subject line\\n    Do not end the subject line with a period\\n    Separate subject from body with a blank line\\n    Use the body to explain what and why vs. how\\n    Can use multiple lines with \\\"-\\\" for bullet points in body\\n----------------------------------------------------------------------\\n            \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(42);\n        i0.ɵɵproperty(\"ngIf\", ctx.Type || ctx.Subject || ctx.Description || ctx.Extras);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", !(ctx.Type || ctx.Subject || ctx.Description || ctx.Extras) ? \"col-sm\" : \"\");\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption]\n  });\n  return TemplateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}